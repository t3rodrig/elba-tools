#!/usr/bin/env python

# Script: qDens2Psi.py
# Author: Mario Orsi (m.orsi at qmul.ac.uk, www.orsi.sems.qmul.ac.uk)
# Purpose: Reads a file containing a charge density profile and
#          calculates the corresponding electrostatic potential (Psi)
# Syntax: python qDens2Psi.py inputFile area
# Example: python qDens2Psi.py qDensHead.zProfile 4630 > eppHead.dat
# Notes: - inputFile = LAMMPS output file generated by fix ave/chunk
#        - area = xy surface area of slabs [Angstrom^2]
# References: - Orsi, Mol. Phys., 112, 1566-1576 (2014)
#             - Orsi & Essex, Faraday Discuss. 161, 249 (2013)
#             - Orsi & Essex, PLoS ONE 6, e28637 (2011)
#             - Sokhan & Tildesley, Mol. Phys. 92, 625 (1997), sec. 3.3

import sys, string
if len(sys.argv) != 3:
  print "Syntax: python qDens2Psi.py inputFile area"
  sys.exit()
inFileName = sys.argv[1]
A_in_m = 1e-10 # angstrom in meter
area = float(sys.argv[2]) * A_in_m**2
inFile = open(inFileName, "r")
lines = inFile.readlines()
inFile.close()
eps0 = 8.854e-12 # [C/(Vm)] permittivity of free space
e_in_C = 1.6021766e-19 # magnitude of electron charge in Coulomb

# find bin thickness (delta):
for line in lines:
    if line[0] != '#': # ignore comments
        words = string.split(line)
        if len(words) == 3:
            nBins = int(words[1])
        if len(words) == 4:
            if int(words[0]) == 1:
                coordLower = float(words[1])
            if int(words[0]) == nBins:
                coordUpper = float(words[1])
delta = abs( coordUpper - coordLower ) * A_in_m / ( nBins - 1 )
slabVolume = area * delta

# calculate and output electric field:
outFile = open('Ez.dat', 'w')
qDensInt = 0.0
for line in lines:
    if line[0] != '#': # ignore comments
        words = string.split(line)
        if len(words) == 4:
            coord = float(words[1])
            qDens = float(words[2]) * float(words[3]) * e_in_C / slabVolume
            qDensInt = qDensInt + delta * qDens
            Ez = qDensInt / eps0
            outFile.write('%f %f\n' % (coord, Ez)) # [A, V/m]
outFile.close()

# calculate electrostatic potential:
inFile = open('Ez.dat', 'r')
elFieldInt = 0.0
lines = inFile.readlines()
inFile.close()
for line in lines:
    words = string.split(line)
    coord = float(words[0])
    elField = float(words[1])
    elFieldInt = elFieldInt + delta * elField
    elPot = - elFieldInt 
    print coord,elPot # [A, V]
